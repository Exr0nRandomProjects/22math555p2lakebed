// Generated by SolidPython 1.1.3 on 2022-09-12 15:11:35


translate(v = [3, 0, 0]) {
	linear_extrude(center = true, height = 1) {
		polygon(points = [[0.0000000000, 0.0000000000], [0.1498750000, 0.1423750000], [0.2990000000, 0.2690000000], [0.4466250000, 0.3791250000], [0.5920000000, 0.4720000000], [0.7343750000, 0.5468750000], [0.8730000000, 0.6030000000], [1.0071250000, 0.6396250000], [1.1360000000, 0.6560000000], [1.2588750000, 0.6513750000], [1.3750000000, 0.6250000000], [1.4836250000, 0.5761250000], [1.5840000000, 0.5040000000], [1.6753750000, 0.4078750000], [1.7570000000, 0.2870000000], [1.8281250000, 0.1406250000], [1.8880000000, -0.0320000000], [1.9358750000, -0.2316250000], [1.9710000000, -0.4590000000], [1.9926250000, -0.7148750000], [2.0000000000, -1.0000000000]]);
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
# make sure to python3 -m pip install solidpython

from solid import scad_render_to_file
from solid import cube, sphere
from solid.utils import difference

from solid import translate
from solid.splines import catmull_rom_polygon, bezier_polygon
from euclid3 import Point2

points = [ Point2(0,0), Point2(1,1), Point2(2,1), Point2(2,-1) ]
shape = catmull_rom_polygon(points, show_controls=True)

bezier_shape = translate([3,0,0])(bezier_polygon(points, subdivisions=20))

# scad = difference()(
#     cube(10),  # Note the comma between each element!
#     sphere(10)
# ) + cube(3)

scad = bezier_shape

scad_render_to_file(scad, "out.scad")

 
 
************************************************/
